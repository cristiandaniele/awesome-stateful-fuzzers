@article{Zhang2024,
	abstract = {Communication protocols form the bedrock of our interconnected world, yet vulnerabilities within their implementations pose significant security threats. Recent developments have seen a surge in fuzzing-based research dedicated to uncovering these vulnerabilities within protocol implementations. However, there still lacks a systematic overview of protocol fuzzing for answering the essential questions such as what the unique challenges are, how existing works solve them, etc. To bridge this gap, we conducted a comprehensive investigation of related works from both academia and industry. Our study includes a detailed summary of the specific challenges in protocol fuzzing, and provides a systematic categorization and overview of existing research efforts. Furthermore, we explore and discuss potential future research directions in protocol fuzzing. This survey serves as a foundational guideline for researchers and practitioners in the field.},
	archiveprefix = {arXiv},
	author = {Zhang, Xiaohan and Zhang, Cen and Li, Xinghua and Du, Zhengjie and Mao, Bing and Li, Yuekang and Zheng, Yaowen and Li, Yeting and Pan, Li and Liu, Yang and Deng, Robert H.},
	doi = {10.1145/3696788},
	eprint = {2401.01568v3},
	month = {1},
	primaryclass = {cs.CR},
	title = {A Survey of Protocol Fuzzing},
	url = {http://arxiv.org/abs/2401.01568v3},
	year = {2024}
}


@inproceedings{Jian2024,
	author = {Jian, Kunpeng and Zou, Yanyan and Li, Yeting and Cao, Jialun and Li, Menghao and Sun, Jian and Shi, Jingyi and Huo, Wei},
	doi = {10.1007/978-3-031-64626-3_11},
	isbn = {9783031646263},
	journal = {Lecture Notes in Computer Science},
	language = {en},
	month = {7},
	pages = {186--204},
	publisher = {Springer Nature Switzerland},
	title = {Fuzzing forÂ Stateful Protocol Implementations: Are We There Yet?},
	url = {https://doi.org/10.1007/978-3-031-64626-3_11},
	year = {2024}
}


@article{Jiang2024,
	abstract = {As one of the most successful and effective software testing techniques in recent years, fuzz testing has uncovered numerous bugs and vulnerabilities in modern software, including network protocol software. In contrast to other fuzzing targets, network protocol software exhibits its distinct characteristics and challenges, introducing a plethora of research questions that need to be addressed in the design and implementation of network protocol fuzzers. While some research work has evaluated and systematized the knowledge of general fuzzing techniques at a high level, there is a lack of similar analysis and summarization for fuzzing research specific to network protocols. This paper offers a comprehensive exposition of network protocol software\textquotesingle s fuzzing-related features and conducts a systematic review of some representative advancements in network protocol fuzzing since its inception. We summarize state-of-the-art strategies and solutions in various aspects, propose a unified protocol fuzzing process model, and introduce the techniques involved in each stage of the model. At the same time, this paper also summarizes the promising research directions in the landscape of protocol fuzzing to foster exploration within the community for more efficient and intelligent modern network protocol fuzzing techniques.},
	author = {Jiang, Shihao and Zhang, Yu and Li, Junqiang and Yu, Hongfang and Luo, Long and Sun, Gang},
	eprint = {2402.17394v1},
	eprintclass = {cs.NI},
	eprinttype = {arxiv},
	month = {2},
	title = {A Survey of Network Protocol Fuzzing: Model, Techniques and Directions},
	url = {http://arxiv.org/abs/2402.17394v1},
	year = {2024}
}

@article{Song2025,
title = {CSFuzzer: A grey-box fuzzer for network protocol using context-aware state feedback},
journal = {Computers & Security},
volume = {157},
pages = {104581},
year = {2025},
issn = {0167-4048},
doi = {https://doi.org/10.1016/j.cose.2025.104581},
url = {https://www.sciencedirect.com/science/article/pii/S0167404825002706},
author = {Xiangpu Song and Yingpei Zeng and Jianliang Wu and Hao Li and Chaoshun Zuo and Qingchuan Zhao and Shanqing Guo},
keywords = {Protocol fuzzing, State feedback, Software testing},
abstract = {Code coverage-guided fuzzers have achieved great success in discovering vulnerabilities, but since code coverage does not adequately describe protocol states, they are not effective enough for protocol fuzzing. Although there has been some work introducing state feedback to guide state exploration in protocol fuzzing, they ignore the complexity of protocol state space, e.g., state variables have different categories and are diverse in data type and number, facing the challenges of inaccurate state variable identification and low fuzzing efficiency. In this paper, we propose a novel context-aware state-guided fuzzing approach, CSFuzzer, to address the above challenges. CSFuzzer first divides the state variables into two categories, i.e., protocol-state variables and sub-state variables based on the context of the states, and automatically identifies and distinguishes these two categories of state variables from code. Then, CSFuzzer uses a new state coverage metric named context-aware state transition coverage to more efficiently guide fuzzing. We have implemented a prototype of CSFuzzer and evaluated it on 12 open-source protocol programs. Our experiments show that CSFuzzer outperforms the existing state-of-the-art fuzzers in terms of code and state coverage as well as fuzzing efficiency. CSFuzzer successfully discovered 10 zero-day vulnerabilities, which have been confirmed by the stakeholders and assigned 9 CVEs/CNVDs.}
}
